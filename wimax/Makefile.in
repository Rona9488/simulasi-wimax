#
#  Makefile for wimax
#
#  ** This file was automatically generated by the command:
#  opp_makemake -f -m
#

# Name of target to be created (-o option)
TARGET = wimax

# User interface (uncomment one) (-u option)
# USERIF_LIBS=$(CMDENV_LIBS)
USERIF_LIBS=$(TKENV_LIBS)

# .ned or .h include paths with -I
INCLUDE_PATH=

# misc additional object and library files to link
EXTRA_OBJS=

# object files from other directories to link with (wildcard needed to prevent "no such file *.o" errors)
EXT_DIR_OBJS=

# time stamps of other directories (used as dependency)
EXT_DIR_TSTAMPS=

# Additional libraries (-L option -l option)
LIBS=

#------------------------------------------------------------------------------

NEDC=@NEDC@
MSGC=@MSGC@
CXX=@CXX@
CC=@CC@
AR=@AR@
SHLIB_LD=@SHLIB_LD@
MAKEDEPEND=@MAKEDEPEND@

CFLAGS=@USER_CFLAGS@
NEDCFLAGS=@NEDCFLAGS@
LDFLAGS=@LDFLAGS@
EXE_SUFFIX=@EXE_SUFFIX@

WITH_PARSIM=@WITH_PARSIM@
WITH_NETBUILDER=@WITH_NETBUILDER@

OMNETPP_INCL_DIR=@OMNETPP_INCL_DIR@
OMNETPP_LIB_DIR=@OMNETPP_LIB_DIR@

TK_LIBS=@TK_LIBS@
MPI_LIBS=@MPI_LIBS@
XML_LIBS=@XML_LIBS@
SYS_LIBS=@SYS_LIBS@
SYS_LIBS_PURE=-lm $(shell $(CXX) -print-file-name=libstdc++.a)

# User interface libs
CMDENV_LIBS=-lenvir -lcmdenv
TKENV_LIBS=-lenvir -ltkenv $(TK_LIBS)

# Simulation kernel
KERNEL_LIBS=-lsim_std

ifeq ($(WITH_NETBUILDER),yes)
KERNEL_LIBS += -lnedxml $(XML_LIBS)
endif

ifeq ($(WITH_PARSIM),yes)
KERNEL_LIBS += $(MPI_LIBS)
endif

# Simulation kernel and user interface libraries
OMNETPP_LIBS=-L$(OMNETPP_LIB_DIR) $(USERIF_LIBS) $(KERNEL_LIBS) $(SYS_LIBS)

COPTS=$(CFLAGS) $(INCLUDE_PATH) -I$(OMNETPP_INCL_DIR)
NEDCOPTS=$(COPTS) $(NEDCFLAGS)
MSGCOPTS= $(INCLUDE_PATH)

#------------------------------------------------------------------------------

# subdirectories to recurse into
SUBDIRS= 

# object files in this directory
OBJS= wimax-phy_n.o wmaxmsg_m.o ipv6node.o  wmaxctrl.o wmaxmac.o  wmaxphy.o fsm.o dhcpv6.o ipv6disp.o mip6.o ra.o mih_m.o

# header files generated (from msg files)
GENERATEDHEADERS= wmaxmsg_m.h

#------------------------------------------------------------------------------

$(TARGET): $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_TSTAMPS) Makefile
	$(CXX) $(LDFLAGS) $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_OBJS) $(LIBS) $(OMNETPP_LIBS) -o $(TARGET)
	echo>.tstamp

$(OBJS) : $(GENERATEDHEADERS)


purify: $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_TSTAMPS) Makefile
	purify $(CXX) $(LDFLAGS) $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_OBJS) $(LIBS) -L$(OMNETPP_LIB_DIR) $(KERNEL_LIBS) $(USERIF_LIBS) $(SYS_LIBS_PURE) -o $(TARGET).pure

.PHONY: subdirs $(SUBDIRS)

subdirs: $(SUBDIRS)

wimax-phy_n.o: wimax-phy_n.cc
	$(CXX) -c $(NEDCOPTS) wimax-phy_n.cc

wimax-phy_n.cc: wimax-phy.ned
	$(NEDC) $(INCLUDE_PATH) wimax-phy.ned

wmaxmsg_m.o: wmaxmsg_m.cc
	$(CXX) -c $(NEDCOPTS) wmaxmsg_m.cc

wmaxmsg_m.cc wmaxmsg_m.h: wmaxmsg.msg
	$(MSGC) $(MSGCOPTS) wmaxmsg.msg

ipv6msg_m.cc ipv6msg_m.h: ipv6msg.msg
	$(MSGC) $(MSGCOPTS) ipv6msg.msg

ipv6msg_m.o: wmaxmsg_m.cc ipv6msg_m.h
	$(CXX) -c $(NEDCOPTS) ipv6msg_m.cc

mih_m.cc mih_m.h: mih.msg
	$(MSGC) $(MSGCOPTS) ipv6msg.msg

mih_m.o: mih_m.cc mih_m.h
	$(CXX) -c $(NEDCOPTS) mih_m.cc

ipv6node.o: ipv6node.cc
	$(CXX) -c $(COPTS) ipv6node.cc

wmaxctrl.o: wmaxctrl.cc
	$(CXX) -c $(COPTS) wmaxctrl.cc

wmaxmac.o: wmaxmac.cc
	$(CXX) -c $(COPTS) wmaxmac.cc

wmaxphy.o: wmaxphy.cc
	$(CXX) -c $(COPTS) wmaxphy.cc

fsm.o: fsm.cc fsm.h
	$(CXX) -c $(COPTS) fsm.cc

wmaxradio.: wmaxradio.cc wmaxradio.h
	$(CXX) -c $(COPTS) wmaxradio.cc

#doc: neddoc doxy

#neddoc:
#	opp_neddoc -a

#doxy: doxy.cfg
#	doxygen doxy.cfg

generateheaders: $(GENERATEDHEADERS)
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) generateheaders) || exit 1; done

clean:
	rm -f $(TARGET)$(EXE_SUFFIX)
	rm -f *.o *_n.cc *_n.h *_m.cc *_m.h .tstamp
	rm -f *.vec *.sca
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) clean); done

depend:
	$(MAKEDEPEND) $(INCLUDE_PATH) -- *.cc
	# $(MAKEDEPEND) $(INCLUDE_PATH) -fMakefile.in -- *.cc
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) depend) || exit 1; done

makefiles:
	# recreate Makefile
	opp_makemake -f  
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) makefiles) || exit 1; done

makefile-ins:
	# recreate Makefile.in
	opp_makemake -f -m  
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) makefile-ins) || exit 1; done

# "re-makemake" and "re-makemake-m" are deprecated, historic names of the above two targets
re-makemake: makefiles
re-makemake-m: makefile-ins


# DO NOT DELETE THIS LINE -- make depend depends on it.

