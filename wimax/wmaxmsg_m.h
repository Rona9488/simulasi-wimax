//
// Generated file, do not edit! Created by nedtool 5.7 from wimax/wmaxmsg.msg.
//

#ifndef __WMAXMSG_M_H
#define __WMAXMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "wmaxmsg.h"
//#include "ipv6.h"
#include "C:\Users\ronaa\Downloads\numbat-master (2)\numbat-master\numbat-master\xMIPv6\src\networklayer\contract\IPv6Address.h"	//Adam
	//Adam
// }}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:31</tt> by nedtool.
 * <pre>
 * class WMaxMacHeaderMsg
 * {
 *     \@customize(true);
 *     abstract int cid;
 *     abstract bool ht;
 *     abstract int bwr;
 * }
 * </pre>
 *
 * WMaxMacHeaderMsg_Base is only useful if it gets subclassed, and WMaxMacHeaderMsg is derived from it.
 * The minimum code to be written for WMaxMacHeaderMsg is the following:
 *
 * <pre>
 * class WMaxMacHeaderMsg : public WMaxMacHeaderMsg_Base
 * {
 *   private:
 *     void copy(const WMaxMacHeaderMsg& other) { ... }

 *   public:
 *     WMaxMacHeaderMsg() : WMaxMacHeaderMsg_Base() {}
 *     WMaxMacHeaderMsg(const WMaxMacHeaderMsg& other) : WMaxMacHeaderMsg_Base(other) {copy(other);}
 *     WMaxMacHeaderMsg& operator=(const WMaxMacHeaderMsg& other) {if (this==&other) return *this; WMaxMacHeaderMsg_Base::operator=(other); copy(other); return *this;}
 *     virtual WMaxMacHeaderMsg *dup() const override {return new WMaxMacHeaderMsg(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from WMaxMacHeaderMsg_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(WMaxMacHeaderMsg)
 * </pre>
 */
class WMaxMacHeaderMsg_Base : public ::omnetpp::cObject
{
  protected:

  private:
    void copy(const WMaxMacHeaderMsg_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMacHeaderMsg_Base&);
    // make constructors protected to avoid instantiation
    WMaxMacHeaderMsg_Base();
    WMaxMacHeaderMsg_Base(const WMaxMacHeaderMsg_Base& other);
    // make assignment operator protected to force the user override it
    WMaxMacHeaderMsg_Base& operator=(const WMaxMacHeaderMsg_Base& other);

  public:
    virtual ~WMaxMacHeaderMsg_Base();
    virtual WMaxMacHeaderMsg_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class WMaxMacHeaderMsg");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getCid() const = 0;
    virtual void setCid(int cid) = 0;
    virtual bool getHt() const = 0;
    virtual void setHt(bool ht) = 0;
    virtual int getBwr() const = 0;
    virtual void setBwr(int bwr) = 0;
};

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:41</tt> by nedtool.
 * <pre>
 * //message --> packet changes (MiM)
 * //message WMaxMsgDlMap
 * packet WMaxMsgDlMapMsg
 * {
 *     WMaxDlMapIE IE[];
 * }
 * </pre>
 */
class WMaxMsgDlMapMsg : public ::omnetpp::cPacket
{
  protected:
    WMaxDlMapIE *IE; // array ptr
    unsigned int IE_arraysize;

  private:
    void copy(const WMaxMsgDlMapMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgDlMapMsg&);

  public:
    WMaxMsgDlMapMsg(const char *name=nullptr, short kind=0);
    WMaxMsgDlMapMsg(const WMaxMsgDlMapMsg& other);
    virtual ~WMaxMsgDlMapMsg();
    WMaxMsgDlMapMsg& operator=(const WMaxMsgDlMapMsg& other);
    virtual WMaxMsgDlMapMsg *dup() const override {return new WMaxMsgDlMapMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setIEArraySize(unsigned int size);
    virtual unsigned int getIEArraySize() const;
    virtual WMaxDlMapIE& getIE(unsigned int k);
    virtual const WMaxDlMapIE& getIE(unsigned int k) const {return const_cast<WMaxMsgDlMapMsg*>(this)->getIE(k);}
    virtual void setIE(unsigned int k, const WMaxDlMapIE& IE);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgDlMapMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgDlMapMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:47</tt> by nedtool.
 * <pre>
 * packet WMaxMsgUlMapMsg
 * {
 *     WMaxUlMapIE IE[];
 * }
 * </pre>
 */
class WMaxMsgUlMapMsg : public ::omnetpp::cPacket
{
  protected:
    WMaxUlMapIE *IE; // array ptr
    unsigned int IE_arraysize;

  private:
    void copy(const WMaxMsgUlMapMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgUlMapMsg&);

  public:
    WMaxMsgUlMapMsg(const char *name=nullptr, short kind=0);
    WMaxMsgUlMapMsg(const WMaxMsgUlMapMsg& other);
    virtual ~WMaxMsgUlMapMsg();
    WMaxMsgUlMapMsg& operator=(const WMaxMsgUlMapMsg& other);
    virtual WMaxMsgUlMapMsg *dup() const override {return new WMaxMsgUlMapMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setIEArraySize(unsigned int size);
    virtual unsigned int getIEArraySize() const;
    virtual WMaxUlMapIE& getIE(unsigned int k);
    virtual const WMaxUlMapIE& getIE(unsigned int k) const {return const_cast<WMaxMsgUlMapMsg*>(this)->getIE(k);}
    virtual void setIE(unsigned int k, const WMaxUlMapIE& IE);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgUlMapMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgUlMapMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:52</tt> by nedtool.
 * <pre>
 * packet WMaxMsgDCD
 * {
 *     int confChangeCount;
 * }
 * </pre>
 */
class WMaxMsgDCD : public ::omnetpp::cPacket
{
  protected:
    int confChangeCount;

  private:
    void copy(const WMaxMsgDCD& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgDCD&);

  public:
    WMaxMsgDCD(const char *name=nullptr, short kind=0);
    WMaxMsgDCD(const WMaxMsgDCD& other);
    virtual ~WMaxMsgDCD();
    WMaxMsgDCD& operator=(const WMaxMsgDCD& other);
    virtual WMaxMsgDCD *dup() const override {return new WMaxMsgDCD(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getConfChangeCount() const;
    virtual void setConfChangeCount(int confChangeCount);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgDCD& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgDCD& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:57</tt> by nedtool.
 * <pre>
 * packet WMaxMsgUCDMsg
 * {
 *     int confChangeCount;
 * }
 * </pre>
 */
class WMaxMsgUCDMsg : public ::omnetpp::cPacket
{
  protected:
    int confChangeCount;

  private:
    void copy(const WMaxMsgUCDMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgUCDMsg&);

  public:
    WMaxMsgUCDMsg(const char *name=nullptr, short kind=0);
    WMaxMsgUCDMsg(const WMaxMsgUCDMsg& other);
    virtual ~WMaxMsgUCDMsg();
    WMaxMsgUCDMsg& operator=(const WMaxMsgUCDMsg& other);
    virtual WMaxMsgUCDMsg *dup() const override {return new WMaxMsgUCDMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getConfChangeCount() const;
    virtual void setConfChangeCount(int confChangeCount);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgUCDMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgUCDMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:62</tt> by nedtool.
 * <pre>
 * packet WMaxMsgRngReqMsg
 * {
 *     int purpose;
 *     WMaxRngReq rngReq;
 *     IPv6Address myIP; // used in remote autoconf
 * 
 *     // used during HO (to perform CID update and recreate connections at target BS)
 *     WMaxQos SfQos[];
 *     int SfCid[];
 * }
 * </pre>
 */
class WMaxMsgRngReqMsg : public ::omnetpp::cPacket
{
  protected:
    int purpose;
    WMaxRngReq rngReq;
    IPv6Address myIP;
    WMaxQos *SfQos; // array ptr
    unsigned int SfQos_arraysize;
    int *SfCid; // array ptr
    unsigned int SfCid_arraysize;

  private:
    void copy(const WMaxMsgRngReqMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgRngReqMsg&);

  public:
    WMaxMsgRngReqMsg(const char *name=nullptr, short kind=0);
    WMaxMsgRngReqMsg(const WMaxMsgRngReqMsg& other);
    virtual ~WMaxMsgRngReqMsg();
    WMaxMsgRngReqMsg& operator=(const WMaxMsgRngReqMsg& other);
    virtual WMaxMsgRngReqMsg *dup() const override {return new WMaxMsgRngReqMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getPurpose() const;
    virtual void setPurpose(int purpose);
    virtual WMaxRngReq& getRngReq();
    virtual const WMaxRngReq& getRngReq() const {return const_cast<WMaxMsgRngReqMsg*>(this)->getRngReq();}
    virtual void setRngReq(const WMaxRngReq& rngReq);
    virtual IPv6Address& getMyIP();
    virtual const IPv6Address& getMyIP() const {return const_cast<WMaxMsgRngReqMsg*>(this)->getMyIP();}
    virtual void setMyIP(const IPv6Address& myIP);
    virtual void setSfQosArraySize(unsigned int size);
    virtual unsigned int getSfQosArraySize() const;
    virtual WMaxQos& getSfQos(unsigned int k);
    virtual const WMaxQos& getSfQos(unsigned int k) const {return const_cast<WMaxMsgRngReqMsg*>(this)->getSfQos(k);}
    virtual void setSfQos(unsigned int k, const WMaxQos& SfQos);
    virtual void setSfCidArraySize(unsigned int size);
    virtual unsigned int getSfCidArraySize() const;
    virtual int getSfCid(unsigned int k) const;
    virtual void setSfCid(unsigned int k, int SfCid);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgRngReqMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgRngReqMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:73</tt> by nedtool.
 * <pre>
 * packet WMaxMsgRngRspMsg
 * {
 *     int purpose;
 *     WMaxRngRsp rngRsp;
 * 
 *     // used during HO (to perform CID update and recreate connections at target BS)
 *     int oldCid[];
 *     int newCid[];
 * }
 * </pre>
 */
class WMaxMsgRngRspMsg : public ::omnetpp::cPacket
{
  protected:
    int purpose;
    WMaxRngRsp rngRsp;
    int *oldCid; // array ptr
    unsigned int oldCid_arraysize;
    int *newCid; // array ptr
    unsigned int newCid_arraysize;

  private:
    void copy(const WMaxMsgRngRspMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgRngRspMsg&);

  public:
    WMaxMsgRngRspMsg(const char *name=nullptr, short kind=0);
    WMaxMsgRngRspMsg(const WMaxMsgRngRspMsg& other);
    virtual ~WMaxMsgRngRspMsg();
    WMaxMsgRngRspMsg& operator=(const WMaxMsgRngRspMsg& other);
    virtual WMaxMsgRngRspMsg *dup() const override {return new WMaxMsgRngRspMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getPurpose() const;
    virtual void setPurpose(int purpose);
    virtual WMaxRngRsp& getRngRsp();
    virtual const WMaxRngRsp& getRngRsp() const {return const_cast<WMaxMsgRngRspMsg*>(this)->getRngRsp();}
    virtual void setRngRsp(const WMaxRngRsp& rngRsp);
    virtual void setOldCidArraySize(unsigned int size);
    virtual unsigned int getOldCidArraySize() const;
    virtual int getOldCid(unsigned int k) const;
    virtual void setOldCid(unsigned int k, int oldCid);
    virtual void setNewCidArraySize(unsigned int size);
    virtual unsigned int getNewCidArraySize() const;
    virtual int getNewCid(unsigned int k) const;
    virtual void setNewCid(unsigned int k, int newCid);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgRngRspMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgRngRspMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:83</tt> by nedtool.
 * <pre>
 * packet WMaxMsgSbcReqMsg
 * {
 * }
 * </pre>
 */
class WMaxMsgSbcReqMsg : public ::omnetpp::cPacket
{
  protected:

  private:
    void copy(const WMaxMsgSbcReqMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgSbcReqMsg&);

  public:
    WMaxMsgSbcReqMsg(const char *name=nullptr, short kind=0);
    WMaxMsgSbcReqMsg(const WMaxMsgSbcReqMsg& other);
    virtual ~WMaxMsgSbcReqMsg();
    WMaxMsgSbcReqMsg& operator=(const WMaxMsgSbcReqMsg& other);
    virtual WMaxMsgSbcReqMsg *dup() const override {return new WMaxMsgSbcReqMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgSbcReqMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgSbcReqMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:86</tt> by nedtool.
 * <pre>
 * packet WMaxMsgSbcRspMsg
 * {
 * }
 * </pre>
 */
class WMaxMsgSbcRspMsg : public ::omnetpp::cPacket
{
  protected:

  private:
    void copy(const WMaxMsgSbcRspMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgSbcRspMsg&);

  public:
    WMaxMsgSbcRspMsg(const char *name=nullptr, short kind=0);
    WMaxMsgSbcRspMsg(const WMaxMsgSbcRspMsg& other);
    virtual ~WMaxMsgSbcRspMsg();
    WMaxMsgSbcRspMsg& operator=(const WMaxMsgSbcRspMsg& other);
    virtual WMaxMsgSbcRspMsg *dup() const override {return new WMaxMsgSbcRspMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgSbcRspMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgSbcRspMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:90</tt> by nedtool.
 * <pre>
 * packet WMaxMsgPkmReq
 * {
 *     int code;
 * }
 * </pre>
 */
class WMaxMsgPkmReq : public ::omnetpp::cPacket
{
  protected:
    int code;

  private:
    void copy(const WMaxMsgPkmReq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgPkmReq&);

  public:
    WMaxMsgPkmReq(const char *name=nullptr, short kind=0);
    WMaxMsgPkmReq(const WMaxMsgPkmReq& other);
    virtual ~WMaxMsgPkmReq();
    WMaxMsgPkmReq& operator=(const WMaxMsgPkmReq& other);
    virtual WMaxMsgPkmReq *dup() const override {return new WMaxMsgPkmReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getCode() const;
    virtual void setCode(int code);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgPkmReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgPkmReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:95</tt> by nedtool.
 * <pre>
 * packet WMaxMsgPkmRsp
 * {
 *     int code;
 * }
 * </pre>
 */
class WMaxMsgPkmRsp : public ::omnetpp::cPacket
{
  protected:
    int code;

  private:
    void copy(const WMaxMsgPkmRsp& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgPkmRsp&);

  public:
    WMaxMsgPkmRsp(const char *name=nullptr, short kind=0);
    WMaxMsgPkmRsp(const WMaxMsgPkmRsp& other);
    virtual ~WMaxMsgPkmRsp();
    WMaxMsgPkmRsp& operator=(const WMaxMsgPkmRsp& other);
    virtual WMaxMsgPkmRsp *dup() const override {return new WMaxMsgPkmRsp(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getCode() const;
    virtual void setCode(int code);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgPkmRsp& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgPkmRsp& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:100</tt> by nedtool.
 * <pre>
 * packet WMaxMsgRegReq
 * {
 * }
 * </pre>
 */
class WMaxMsgRegReq : public ::omnetpp::cPacket
{
  protected:

  private:
    void copy(const WMaxMsgRegReq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgRegReq&);

  public:
    WMaxMsgRegReq(const char *name=nullptr, short kind=0);
    WMaxMsgRegReq(const WMaxMsgRegReq& other);
    virtual ~WMaxMsgRegReq();
    WMaxMsgRegReq& operator=(const WMaxMsgRegReq& other);
    virtual WMaxMsgRegReq *dup() const override {return new WMaxMsgRegReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgRegReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgRegReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:103</tt> by nedtool.
 * <pre>
 * packet WMaxMsgRegRsp
 * {
 * }
 * </pre>
 */
class WMaxMsgRegRsp : public ::omnetpp::cPacket
{
  protected:

  private:
    void copy(const WMaxMsgRegRsp& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgRegRsp&);

  public:
    WMaxMsgRegRsp(const char *name=nullptr, short kind=0);
    WMaxMsgRegRsp(const WMaxMsgRegRsp& other);
    virtual ~WMaxMsgRegRsp();
    WMaxMsgRegRsp& operator=(const WMaxMsgRegRsp& other);
    virtual WMaxMsgRegRsp *dup() const override {return new WMaxMsgRegRsp(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgRegRsp& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgRegRsp& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:107</tt> by nedtool.
 * <pre>
 * packet WMaxMsgMobScnReq
 * {
 * }
 * </pre>
 */
class WMaxMsgMobScnReq : public ::omnetpp::cPacket
{
  protected:

  private:
    void copy(const WMaxMsgMobScnReq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgMobScnReq&);

  public:
    WMaxMsgMobScnReq(const char *name=nullptr, short kind=0);
    WMaxMsgMobScnReq(const WMaxMsgMobScnReq& other);
    virtual ~WMaxMsgMobScnReq();
    WMaxMsgMobScnReq& operator=(const WMaxMsgMobScnReq& other);
    virtual WMaxMsgMobScnReq *dup() const override {return new WMaxMsgMobScnReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgMobScnReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgMobScnReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:111</tt> by nedtool.
 * <pre>
 * packet WMaxMsgMobScnRsp
 * {
 * }
 * </pre>
 */
class WMaxMsgMobScnRsp : public ::omnetpp::cPacket
{
  protected:

  private:
    void copy(const WMaxMsgMobScnRsp& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgMobScnRsp&);

  public:
    WMaxMsgMobScnRsp(const char *name=nullptr, short kind=0);
    WMaxMsgMobScnRsp(const WMaxMsgMobScnRsp& other);
    virtual ~WMaxMsgMobScnRsp();
    WMaxMsgMobScnRsp& operator=(const WMaxMsgMobScnRsp& other);
    virtual WMaxMsgMobScnRsp *dup() const override {return new WMaxMsgMobScnRsp(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgMobScnRsp& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgMobScnRsp& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:115</tt> by nedtool.
 * <pre>
 * packet WMaxMsgMSHOREQ
 * {
 *     WMaxBSFull BSFull[];
 * }
 * </pre>
 */
class WMaxMsgMSHOREQ : public ::omnetpp::cPacket
{
  protected:
    WMaxBSFull *BSFull; // array ptr
    unsigned int BSFull_arraysize;

  private:
    void copy(const WMaxMsgMSHOREQ& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgMSHOREQ&);

  public:
    WMaxMsgMSHOREQ(const char *name=nullptr, short kind=0);
    WMaxMsgMSHOREQ(const WMaxMsgMSHOREQ& other);
    virtual ~WMaxMsgMSHOREQ();
    WMaxMsgMSHOREQ& operator=(const WMaxMsgMSHOREQ& other);
    virtual WMaxMsgMSHOREQ *dup() const override {return new WMaxMsgMSHOREQ(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setBSFullArraySize(unsigned int size);
    virtual unsigned int getBSFullArraySize() const;
    virtual WMaxBSFull& getBSFull(unsigned int k);
    virtual const WMaxBSFull& getBSFull(unsigned int k) const {return const_cast<WMaxMsgMSHOREQ*>(this)->getBSFull(k);}
    virtual void setBSFull(unsigned int k, const WMaxBSFull& BSFull);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgMSHOREQ& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgMSHOREQ& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:120</tt> by nedtool.
 * <pre>
 * packet WMaxMsgBSHORSP
 * {
 *     WMaxBSFull BSFull[];
 * }
 * </pre>
 */
class WMaxMsgBSHORSP : public ::omnetpp::cPacket
{
  protected:
    WMaxBSFull *BSFull; // array ptr
    unsigned int BSFull_arraysize;

  private:
    void copy(const WMaxMsgBSHORSP& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgBSHORSP&);

  public:
    WMaxMsgBSHORSP(const char *name=nullptr, short kind=0);
    WMaxMsgBSHORSP(const WMaxMsgBSHORSP& other);
    virtual ~WMaxMsgBSHORSP();
    WMaxMsgBSHORSP& operator=(const WMaxMsgBSHORSP& other);
    virtual WMaxMsgBSHORSP *dup() const override {return new WMaxMsgBSHORSP(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setBSFullArraySize(unsigned int size);
    virtual unsigned int getBSFullArraySize() const;
    virtual WMaxBSFull& getBSFull(unsigned int k);
    virtual const WMaxBSFull& getBSFull(unsigned int k) const {return const_cast<WMaxMsgBSHORSP*>(this)->getBSFull(k);}
    virtual void setBSFull(unsigned int k, const WMaxBSFull& BSFull);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgBSHORSP& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgBSHORSP& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:125</tt> by nedtool.
 * <pre>
 * packet WMaxMsgHOIND
 * {
 *     int status;
 *     WMaxBSFull target;
 * }
 * </pre>
 */
class WMaxMsgHOIND : public ::omnetpp::cPacket
{
  protected:
    int status;
    WMaxBSFull target;

  private:
    void copy(const WMaxMsgHOIND& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgHOIND&);

  public:
    WMaxMsgHOIND(const char *name=nullptr, short kind=0);
    WMaxMsgHOIND(const WMaxMsgHOIND& other);
    virtual ~WMaxMsgHOIND();
    WMaxMsgHOIND& operator=(const WMaxMsgHOIND& other);
    virtual WMaxMsgHOIND *dup() const override {return new WMaxMsgHOIND(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getStatus() const;
    virtual void setStatus(int status);
    virtual WMaxBSFull& getTarget();
    virtual const WMaxBSFull& getTarget() const {return const_cast<WMaxMsgHOIND*>(this)->getTarget();}
    virtual void setTarget(const WMaxBSFull& target);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgHOIND& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgHOIND& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:131</tt> by nedtool.
 * <pre>
 * packet WMaxMsgCDMA
 * {
 *     int code;
 *     int purpose; // use WMaxCdmaPurpose type here
 * 
 *     /// \@todo - add other parameters
 * }
 * </pre>
 */
class WMaxMsgCDMA : public ::omnetpp::cPacket
{
  protected:
    int code;
    int purpose;

  private:
    void copy(const WMaxMsgCDMA& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgCDMA&);

  public:
    WMaxMsgCDMA(const char *name=nullptr, short kind=0);
    WMaxMsgCDMA(const WMaxMsgCDMA& other);
    virtual ~WMaxMsgCDMA();
    WMaxMsgCDMA& operator=(const WMaxMsgCDMA& other);
    virtual WMaxMsgCDMA *dup() const override {return new WMaxMsgCDMA(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getCode() const;
    virtual void setCode(int code);
    virtual int getPurpose() const;
    virtual void setPurpose(int purpose);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgCDMA& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgCDMA& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:139</tt> by nedtool.
 * <pre>
 * packet WMaxMsgBWR
 * {
 * }
 * </pre>
 */
class WMaxMsgBWR : public ::omnetpp::cPacket
{
  protected:

  private:
    void copy(const WMaxMsgBWR& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgBWR&);

  public:
    WMaxMsgBWR(const char *name=nullptr, short kind=0);
    WMaxMsgBWR(const WMaxMsgBWR& other);
    virtual ~WMaxMsgBWR();
    WMaxMsgBWR& operator=(const WMaxMsgBWR& other);
    virtual WMaxMsgBWR *dup() const override {return new WMaxMsgBWR(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgBWR& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgBWR& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:144</tt> by nedtool.
 * <pre>
 * // Table 38
 * packet WMaxMsgDsaReq
 * {
 *     int transactionID;
 *     WMaxQos qos[];
 * }
 * </pre>
 */
class WMaxMsgDsaReq : public ::omnetpp::cPacket
{
  protected:
    int transactionID;
    WMaxQos *qos; // array ptr
    unsigned int qos_arraysize;

  private:
    void copy(const WMaxMsgDsaReq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgDsaReq&);

  public:
    WMaxMsgDsaReq(const char *name=nullptr, short kind=0);
    WMaxMsgDsaReq(const WMaxMsgDsaReq& other);
    virtual ~WMaxMsgDsaReq();
    WMaxMsgDsaReq& operator=(const WMaxMsgDsaReq& other);
    virtual WMaxMsgDsaReq *dup() const override {return new WMaxMsgDsaReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getTransactionID() const;
    virtual void setTransactionID(int transactionID);
    virtual void setQosArraySize(unsigned int size);
    virtual unsigned int getQosArraySize() const;
    virtual WMaxQos& getQos(unsigned int k);
    virtual const WMaxQos& getQos(unsigned int k) const {return const_cast<WMaxMsgDsaReq*>(this)->getQos(k);}
    virtual void setQos(unsigned int k, const WMaxQos& qos);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgDsaReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgDsaReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:151</tt> by nedtool.
 * <pre>
 * // Table 56
 * packet WMaxMsgDsxRvd
 * {
 *     int transactionID;
 *     int confirmationCode; // Table 384
 * }
 * </pre>
 */
class WMaxMsgDsxRvd : public ::omnetpp::cPacket
{
  protected:
    int transactionID;
    int confirmationCode;

  private:
    void copy(const WMaxMsgDsxRvd& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgDsxRvd&);

  public:
    WMaxMsgDsxRvd(const char *name=nullptr, short kind=0);
    WMaxMsgDsxRvd(const WMaxMsgDsxRvd& other);
    virtual ~WMaxMsgDsxRvd();
    WMaxMsgDsxRvd& operator=(const WMaxMsgDsxRvd& other);
    virtual WMaxMsgDsxRvd *dup() const override {return new WMaxMsgDsxRvd(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getTransactionID() const;
    virtual void setTransactionID(int transactionID);
    virtual int getConfirmationCode() const;
    virtual void setConfirmationCode(int confirmationCode);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgDsxRvd& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgDsxRvd& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:158</tt> by nedtool.
 * <pre>
 * // Table 39
 * packet WMaxMsgDsaRsp
 * {
 *     int transactionID;
 *     int confirmationCode; // Table 384
 *     WMaxQos qos[];
 *     int cid;
 * }
 * </pre>
 */
class WMaxMsgDsaRsp : public ::omnetpp::cPacket
{
  protected:
    int transactionID;
    int confirmationCode;
    WMaxQos *qos; // array ptr
    unsigned int qos_arraysize;
    int cid;

  private:
    void copy(const WMaxMsgDsaRsp& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgDsaRsp&);

  public:
    WMaxMsgDsaRsp(const char *name=nullptr, short kind=0);
    WMaxMsgDsaRsp(const WMaxMsgDsaRsp& other);
    virtual ~WMaxMsgDsaRsp();
    WMaxMsgDsaRsp& operator=(const WMaxMsgDsaRsp& other);
    virtual WMaxMsgDsaRsp *dup() const override {return new WMaxMsgDsaRsp(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getTransactionID() const;
    virtual void setTransactionID(int transactionID);
    virtual int getConfirmationCode() const;
    virtual void setConfirmationCode(int confirmationCode);
    virtual void setQosArraySize(unsigned int size);
    virtual unsigned int getQosArraySize() const;
    virtual WMaxQos& getQos(unsigned int k);
    virtual const WMaxQos& getQos(unsigned int k) const {return const_cast<WMaxMsgDsaRsp*>(this)->getQos(k);}
    virtual void setQos(unsigned int k, const WMaxQos& qos);
    virtual int getCid() const;
    virtual void setCid(int cid);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgDsaRsp& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgDsaRsp& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:167</tt> by nedtool.
 * <pre>
 * // Table 40
 * packet WMaxMsgDsaAck
 * {
 *     int transactionID;
 *     int confirmationCode; // Table 384
 *     WMaxQos qos[];
 * }
 * 
 * // ********************************************************************************
 * // *** fake packets used to communicate between modules **************************
 * // ********************************************************************************
 * </pre>
 */
class WMaxMsgDsaAck : public ::omnetpp::cPacket
{
  protected:
    int transactionID;
    int confirmationCode;
    WMaxQos *qos; // array ptr
    unsigned int qos_arraysize;

  private:
    void copy(const WMaxMsgDsaAck& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMsgDsaAck&);

  public:
    WMaxMsgDsaAck(const char *name=nullptr, short kind=0);
    WMaxMsgDsaAck(const WMaxMsgDsaAck& other);
    virtual ~WMaxMsgDsaAck();
    WMaxMsgDsaAck& operator=(const WMaxMsgDsaAck& other);
    virtual WMaxMsgDsaAck *dup() const override {return new WMaxMsgDsaAck(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getTransactionID() const;
    virtual void setTransactionID(int transactionID);
    virtual int getConfirmationCode() const;
    virtual void setConfirmationCode(int confirmationCode);
    virtual void setQosArraySize(unsigned int size);
    virtual unsigned int getQosArraySize() const;
    virtual WMaxQos& getQos(unsigned int k);
    virtual const WMaxQos& getQos(unsigned int k) const {return const_cast<WMaxMsgDsaAck*>(this)->getQos(k);}
    virtual void setQos(unsigned int k, const WMaxQos& qos);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMsgDsaAck& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMsgDsaAck& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:179</tt> by nedtool.
 * <pre>
 * // this packet is sent once every 5ms from MAC to PHY to initiate next frame
 * packet WMaxPhyDummyFrameStart
 * {
 * }
 * </pre>
 */
class WMaxPhyDummyFrameStart : public ::omnetpp::cPacket
{
  protected:

  private:
    void copy(const WMaxPhyDummyFrameStart& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxPhyDummyFrameStart&);

  public:
    WMaxPhyDummyFrameStart(const char *name=nullptr, short kind=0);
    WMaxPhyDummyFrameStart(const WMaxPhyDummyFrameStart& other);
    virtual ~WMaxPhyDummyFrameStart();
    WMaxPhyDummyFrameStart& operator=(const WMaxPhyDummyFrameStart& other);
    virtual WMaxPhyDummyFrameStart *dup() const override {return new WMaxPhyDummyFrameStart(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxPhyDummyFrameStart& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxPhyDummyFrameStart& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:183</tt> by nedtool.
 * <pre>
 * packet WMaxEvent_FlowCreationStart
 * {
 *     int skipDSA;
 *     int gateIndex;
 *     WMaxQos qos[];
 * }
 * </pre>
 */
class WMaxEvent_FlowCreationStart : public ::omnetpp::cPacket
{
  protected:
    int skipDSA;
    int gateIndex;
    WMaxQos *qos; // array ptr
    unsigned int qos_arraysize;

  private:
    void copy(const WMaxEvent_FlowCreationStart& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxEvent_FlowCreationStart&);

  public:
    WMaxEvent_FlowCreationStart(const char *name=nullptr, short kind=0);
    WMaxEvent_FlowCreationStart(const WMaxEvent_FlowCreationStart& other);
    virtual ~WMaxEvent_FlowCreationStart();
    WMaxEvent_FlowCreationStart& operator=(const WMaxEvent_FlowCreationStart& other);
    virtual WMaxEvent_FlowCreationStart *dup() const override {return new WMaxEvent_FlowCreationStart(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSkipDSA() const;
    virtual void setSkipDSA(int skipDSA);
    virtual int getGateIndex() const;
    virtual void setGateIndex(int gateIndex);
    virtual void setQosArraySize(unsigned int size);
    virtual unsigned int getQosArraySize() const;
    virtual WMaxQos& getQos(unsigned int k);
    virtual const WMaxQos& getQos(unsigned int k) const {return const_cast<WMaxEvent_FlowCreationStart*>(this)->getQos(k);}
    virtual void setQos(unsigned int k, const WMaxQos& qos);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxEvent_FlowCreationStart& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxEvent_FlowCreationStart& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:190</tt> by nedtool.
 * <pre>
 * packet WMaxMacAddConn
 * {
 *     int gateIndex;
 *     int cid;
 *     WMaxQos qos[];
 *     IPv6Address dstAddr;
 *     uint64_t macAddr;
 * }
 * </pre>
 */
class WMaxMacAddConn : public ::omnetpp::cPacket
{
  protected:
    int gateIndex;
    int cid;
    WMaxQos *qos; // array ptr
    unsigned int qos_arraysize;
    IPv6Address dstAddr;
    uint64_t macAddr;

  private:
    void copy(const WMaxMacAddConn& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMacAddConn&);

  public:
    WMaxMacAddConn(const char *name=nullptr, short kind=0);
    WMaxMacAddConn(const WMaxMacAddConn& other);
    virtual ~WMaxMacAddConn();
    WMaxMacAddConn& operator=(const WMaxMacAddConn& other);
    virtual WMaxMacAddConn *dup() const override {return new WMaxMacAddConn(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getGateIndex() const;
    virtual void setGateIndex(int gateIndex);
    virtual int getCid() const;
    virtual void setCid(int cid);
    virtual void setQosArraySize(unsigned int size);
    virtual unsigned int getQosArraySize() const;
    virtual WMaxQos& getQos(unsigned int k);
    virtual const WMaxQos& getQos(unsigned int k) const {return const_cast<WMaxMacAddConn*>(this)->getQos(k);}
    virtual void setQos(unsigned int k, const WMaxQos& qos);
    virtual IPv6Address& getDstAddr();
    virtual const IPv6Address& getDstAddr() const {return const_cast<WMaxMacAddConn*>(this)->getDstAddr();}
    virtual void setDstAddr(const IPv6Address& dstAddr);
    virtual uint64_t getMacAddr() const;
    virtual void setMacAddr(uint64_t macAddr);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMacAddConn& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMacAddConn& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:199</tt> by nedtool.
 * <pre>
 * packet WMaxMacAddMngmntConn
 * {
 *     int cid;
 * }
 * </pre>
 */
class WMaxMacAddMngmntConn : public ::omnetpp::cPacket
{
  protected:
    int cid;

  private:
    void copy(const WMaxMacAddMngmntConn& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMacAddMngmntConn&);

  public:
    WMaxMacAddMngmntConn(const char *name=nullptr, short kind=0);
    WMaxMacAddMngmntConn(const WMaxMacAddMngmntConn& other);
    virtual ~WMaxMacAddMngmntConn();
    WMaxMacAddMngmntConn& operator=(const WMaxMacAddMngmntConn& other);
    virtual WMaxMacAddMngmntConn *dup() const override {return new WMaxMacAddMngmntConn(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getCid() const;
    virtual void setCid(int cid);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMacAddMngmntConn& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMacAddMngmntConn& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:204</tt> by nedtool.
 * <pre>
 * packet WMaxEvent_DelConn
 * {
 *     int cid;
 *     bool isBasic;
 * }
 * </pre>
 */
class WMaxEvent_DelConn : public ::omnetpp::cPacket
{
  protected:
    int cid;
    bool isBasic;

  private:
    void copy(const WMaxEvent_DelConn& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxEvent_DelConn&);

  public:
    WMaxEvent_DelConn(const char *name=nullptr, short kind=0);
    WMaxEvent_DelConn(const WMaxEvent_DelConn& other);
    virtual ~WMaxEvent_DelConn();
    WMaxEvent_DelConn& operator=(const WMaxEvent_DelConn& other);
    virtual WMaxEvent_DelConn *dup() const override {return new WMaxEvent_DelConn(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getCid() const;
    virtual void setCid(int cid);
    virtual bool getIsBasic() const;
    virtual void setIsBasic(bool isBasic);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxEvent_DelConn& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxEvent_DelConn& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:210</tt> by nedtool.
 * <pre>
 * packet WMaxEvent_FlowEnable
 * {
 * }
 * </pre>
 */
class WMaxEvent_FlowEnable : public ::omnetpp::cPacket
{
  protected:

  private:
    void copy(const WMaxEvent_FlowEnable& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxEvent_FlowEnable&);

  public:
    WMaxEvent_FlowEnable(const char *name=nullptr, short kind=0);
    WMaxEvent_FlowEnable(const WMaxEvent_FlowEnable& other);
    virtual ~WMaxEvent_FlowEnable();
    WMaxEvent_FlowEnable& operator=(const WMaxEvent_FlowEnable& other);
    virtual WMaxEvent_FlowEnable *dup() const override {return new WMaxEvent_FlowEnable(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxEvent_FlowEnable& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxEvent_FlowEnable& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:214</tt> by nedtool.
 * <pre>
 * packet WMaxEvent_FlowDisable
 * {
 * }
 * </pre>
 */
class WMaxEvent_FlowDisable : public ::omnetpp::cPacket
{
  protected:

  private:
    void copy(const WMaxEvent_FlowDisable& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxEvent_FlowDisable&);

  public:
    WMaxEvent_FlowDisable(const char *name=nullptr, short kind=0);
    WMaxEvent_FlowDisable(const WMaxEvent_FlowDisable& other);
    virtual ~WMaxEvent_FlowDisable();
    WMaxEvent_FlowDisable& operator=(const WMaxEvent_FlowDisable& other);
    virtual WMaxEvent_FlowDisable *dup() const override {return new WMaxEvent_FlowDisable(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxEvent_FlowDisable& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxEvent_FlowDisable& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:218</tt> by nedtool.
 * <pre>
 * packet WMaxMacTerminateAllConns
 * {
 * }
 * </pre>
 */
class WMaxMacTerminateAllConns : public ::omnetpp::cPacket
{
  protected:

  private:
    void copy(const WMaxMacTerminateAllConns& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxMacTerminateAllConns&);

  public:
    WMaxMacTerminateAllConns(const char *name=nullptr, short kind=0);
    WMaxMacTerminateAllConns(const WMaxMacTerminateAllConns& other);
    virtual ~WMaxMacTerminateAllConns();
    WMaxMacTerminateAllConns& operator=(const WMaxMacTerminateAllConns& other);
    virtual WMaxMacTerminateAllConns *dup() const override {return new WMaxMacTerminateAllConns(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxMacTerminateAllConns& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxMacTerminateAllConns& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:222</tt> by nedtool.
 * <pre>
 * packet WMaxHandoverNotify // L2 informing L3 about incoming handover
 * {
 *     int BS_index;    // should be AP-ID, BSID
 * }
 * </pre>
 */
class WMaxHandoverNotify : public ::omnetpp::cPacket
{
  protected:
    int BS_index;

  private:
    void copy(const WMaxHandoverNotify& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxHandoverNotify&);

  public:
    WMaxHandoverNotify(const char *name=nullptr, short kind=0);
    WMaxHandoverNotify(const WMaxHandoverNotify& other);
    virtual ~WMaxHandoverNotify();
    WMaxHandoverNotify& operator=(const WMaxHandoverNotify& other);
    virtual WMaxHandoverNotify *dup() const override {return new WMaxHandoverNotify(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getBS_index() const;
    virtual void setBS_index(int BS_index);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxHandoverNotify& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxHandoverNotify& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>wimax/wmaxmsg.msg:227</tt> by nedtool.
 * <pre>
 * packet WMaxHandoverNotifyAcknowledge
 * {
 * }
 * </pre>
 */
class WMaxHandoverNotifyAcknowledge : public ::omnetpp::cPacket
{
  protected:

  private:
    void copy(const WMaxHandoverNotifyAcknowledge& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WMaxHandoverNotifyAcknowledge&);

  public:
    WMaxHandoverNotifyAcknowledge(const char *name=nullptr, short kind=0);
    WMaxHandoverNotifyAcknowledge(const WMaxHandoverNotifyAcknowledge& other);
    virtual ~WMaxHandoverNotifyAcknowledge();
    WMaxHandoverNotifyAcknowledge& operator=(const WMaxHandoverNotifyAcknowledge& other);
    virtual WMaxHandoverNotifyAcknowledge *dup() const override {return new WMaxHandoverNotifyAcknowledge(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WMaxHandoverNotifyAcknowledge& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WMaxHandoverNotifyAcknowledge& obj) {obj.parsimUnpack(b);}


#endif // ifndef __WMAXMSG_M_H

